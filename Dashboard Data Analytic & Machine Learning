<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CSV Viewer Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; background: #f8f8f8; padding: 20px; }
    h1 { text-align: center; }
    .container { display: flex; flex-direction: column; gap: 30px; }
    .upload-section { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 5px rgba(0,0,0,0.1); }
    input[type="file"] { margin-top: 10px; }
    table { width: 100%; border-collapse: collapse; margin-top: 10px; background: white; }
    th, td { padding: 8px 10px; border: 1px solid #ddd; }
    th { background-color: #007bff; color: white; }
    .pagination { margin-top: 10px; text-align: center; }
    .pagination button { margin: 0 3px; padding: 5px 10px; border: none; background-color: #f0f0f0; border-radius: 4px; cursor: pointer; }
    .pagination button.active { background-color: #007bff; color: white; }
    .pagination button:disabled { background-color: #ccc; cursor: default; }
  </style>
</head>
<body>
  <h1>Upload & View CSV: Forms and Tasks (with Pagination)</h1>
  <div class="container">
    <div class="upload-section">
      <label><strong>Upload Forms CSV:</strong></label>
      <input type="file" id="formsFile" accept=".csv">
      <div id="formsTable"></div>
      <div class="pagination" id="formsPagination"></div>
    </div>

    <div class="upload-section">
      <label><strong>Upload Tasks CSV:</strong></label>
      <input type="file" id="tasksFile" accept=".csv">
      <div id="tasksTable"></div>
      <div class="pagination" id="tasksPagination"></div>
    </div>
  </div>

  <script>
    let rowsPerPage = 20;
    let formsData = [], tasksData = [];

    function renderPaginatedTable(data, targetId, paginationId, page) {
      if (!data || data.length === 0) return;
      const start = (page - 1) * rowsPerPage + 1;
      const end = Math.min(start + rowsPerPage, data.length);
      const headers = data[0];
      const rows = data.slice(start, end);

      const table = document.createElement("table");
      const thead = document.createElement("thead");
      const tbody = document.createElement("tbody");

      const headerRow = document.createElement("tr");
      headers.forEach(header => {
        const th = document.createElement("th");
        th.textContent = header;
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);

      rows.forEach(row => {
        const tr = document.createElement("tr");
        row.forEach(cell => {
          const td = document.createElement("td");
          td.textContent = cell;
          tr.appendChild(td);
        });
        tbody.appendChild(tr);
      });

      table.appendChild(thead);
      table.appendChild(tbody);
      const target = document.getElementById(targetId);
      target.innerHTML = '';
      target.appendChild(table);

      // Pagination
      const pageCount = Math.ceil((data.length - 1) / rowsPerPage);
      const pagination = document.getElementById(paginationId);
      pagination.innerHTML = '';

      const backButton = document.createElement("button");
      backButton.textContent = "Back";
      backButton.disabled = page === 1;
      backButton.onclick = () => renderPaginatedTable(data, targetId, paginationId, page - 1);
      pagination.appendChild(backButton);

      let startPage = Math.max(1, page - 4);
      let endPage = Math.min(startPage + 9, pageCount);
      if (endPage - startPage < 9) startPage = Math.max(1, endPage - 9);

      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        if (i === page) btn.classList.add("active");
        btn.onclick = () => renderPaginatedTable(data, targetId, paginationId, i);
        pagination.appendChild(btn);
      }

      const nextButton = document.createElement("button");
      nextButton.textContent = "Next";
      nextButton.disabled = page === pageCount;
      nextButton.onclick = () => renderPaginatedTable(data, targetId, paginationId, page + 1);
      pagination.appendChild(nextButton);
    }

    document.getElementById("formsFile").addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (!file) return;
      Papa.parse(file, {
        complete: function(results) {
          formsData = results.data;
          renderPaginatedTable(formsData, "formsTable", "formsPagination", 1);
          renderFormsAnalytics(formsData);
        }
      });
    });

    document.getElementById("tasksFile").addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (!file) return;
      Papa.parse(file, {
        complete: function(results) {
          tasksData = results.data;
          renderPaginatedTable(tasksData, "tasksTable", "tasksPagination", 1);
          renderTasksAnalytics(tasksData);
        }
      });
    });

    function renderFormsAnalytics(data) {
      const headers = data[0];
      const statusIndex = headers.indexOf("status");
      const overdueIndex = headers.indexOf("overdue");

      const statusCount = {};
      let overdueTrue = 0;

      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const status = row[statusIndex];
        const overdue = row[overdueIndex];

        statusCount[status] = (statusCount[status] || 0) + 1;
        if (overdue.toLowerCase() === "true") overdueTrue++;
      }

      console.log("Forms Status Count:", statusCount);
      console.log("Overdue Forms:", overdueTrue);
    }

    function renderTasksAnalytics(data) {
      const headers = data[0];
      const priorityIndex = headers.indexOf("priority");
      const causeIndex = headers.indexOf("cause");

      const priorityCount = {};
      const causeCount = {};

      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const priority = row[priorityIndex];
        const cause = row[causeIndex];

        priorityCount[priority] = (priorityCount[priority] || 0) + 1;
        causeCount[cause] = (causeCount[cause] || 0) + 1;
      }

      console.log("Tasks Priority Count:", priorityCount);
      console.log("Tasks Cause Count:", causeCount);
    }
  </script>
</body>
</html>
